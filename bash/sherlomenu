#!/bin/bash
# -*- encoding: utf-8 -*-

###################################################################
#Script Name: Sherlomenu
#Description: Menu de acceso para el montaje de las distintas nubes
#Args: N/A
#Creation/Update: 20191022/20230222
#Author: www.sherblog.pro                                                
#Email: sherlockes@gmail.com                                           
###################################################################

# ----------------------------------
# Definición de variables
# ----------------------------------

VideoNas_dir=~/VideoNas
VideoNas_lan_cmd='sshfs sherlockes@192.168.10.200:../../video/ $VideoNas_dir'
VideoNas_zer_cmd='sshfs sherlockes@192.168.191.200:../../video/ $VideoNas_dir'
Pi_lan_ip='192.168.10.202'
Pi_zer_ip='192.168.191.202'
Nas_lan_ip='192.168.10.200'
Nas_zer_ip='192.168.191.200'
Gphotos_dir=~/clouds/gphotos-sync
Gphotos_cmd='rclone mount Sherlockes_Gphotos:/media/all Fotos'

# --------------------------------------------
# Comprobar la instalación de sshfs
# (Montar carpetas remotas)
# --------------------------------------------
if which sshfs >/dev/null; then
    echo 'sshfs está instalado...'
else
    echo 'instalando sshfs...'
    sudo apt install sshfs
fi

# --------------------------------------------
# Comprobar si es posible el acceso al NAS desde la LAN o hay que
# hacerlo a través de la IP de Zerotier
# --------------------------------------------
status=$(ssh -o BatchMode=yes -o ConnectTimeout=5 sherlockes@$Nas_lan_ip echo ok 2>&1)

if [[ $status == ok ]] ; then
    echo 'Acceso al NAS en Lan autorizado...'
    VideoNas_cmd=$VideoNas_lan_cmd
elif [[ $status == "Permission denied"* ]] ; then
    echo 'Acceso al NAS no autorizado...'
    sleep 2
else
    echo 'El NAS no está en Lan, se intentará a través de Zerotier...'
    status=$(ssh -o BatchMode=yes -o ConnectTimeout=5 sherlockes@$Nas_zer_ip echo ok 2>&1)

    if [[ $status == ok ]] ; then
	echo 'Acceso al Nas autorizado a través de Zerotier'
	VideoNas_cmd=$VideoNas_zer_cmd
    elif [[ $status == "Permission denied"* ]] ; then
	echo 'Acceso al NAS no autorizado...'
    else
	echo 'El NAS no está conectado...'
	sleep 2
    fi
    
fi

# --------------------------------------------
# Funciones de Rclone
# --------------------------------------------
# La primera parrafada es por el tema de la ruta relativa...

source "$( dirname "${BASH_SOURCE[0]}" )/rclone.sh"


# -------------------------------------------------------
# Función de montaje y desmontaje de unidades
# -------------------------------------------------------
des_montar(){
    local carpeta="$1_dir"
    local comando="$1_cmd"
    
    if montado $1;
    then
        echo "Desmontando $1..."
        fusermount -u ${!carpeta}
        rm -rf ${!carpeta}
    else
        mkdir ${!carpeta}
	eval ${!comando}
    fi
}

# -------------------------------------------------------
# Subir a Github los cambios en SherloSripts
# -------------------------------------------------------
SherloScripts(){

    #Comprobar el acceso a la Raspberry
    status=$(ssh -o BatchMode=yes -o ConnectTimeout=5 pi@$Pi_lan_ip echo ok 2>&1)

    if [[ $status == ok ]] ; then
	echo 'Acceso a la Raspberry en Lan autorizado...'
	Pi_ip=$Pi_lan_ip
    elif [[ $status == "Permission denied"* ]] ; then
	echo 'Acceso a la Raspberry no autorizado...'
	return
    else
	echo 'La Raspberry no está en Lan, se intentará a través de Zerotier...'
	Pi_ip=$Pi_zer_ip
    fi

    # Lanza el Script en la Raspberry para sincronizar el repositorio
    ssh pi@$Pi_ip '~/SherloScripts/bash/sherloscripts_push.sh'
}

# -------------------------------------------
# Propagación del archivo de config de rclone
# -------------------------------------------
copy_rclone_config(){

    rclone config
    
    LOCAL_CON=$(rclone config file | tail -1)
    REMOTE_CON="Sherlockes_GD:dotfiles/rclone/rclone.conf"
    BKP_CON="Sherlockes_GD:dotfiles/rclone/rclone($(date '+%Y%m%d')bkp).conf"

    rclone copyto $REMOTE_CON $BKP_CON
    rclone copyto $LOCAL_CON $REMOTE_CON
    
    if [ -d ~/dotfiles/rclone/ ]; then
	ln -sf ~/dotfiles/rclone/rclone.conf $LOCAL_CON
    fi
}

# -------------------------------------------------------
# Copia de seguridad de Google Photos
# -------------------------------------------------------
Google_Photos(){
    echo "Creando la carpeta contenedora $GPhotos_dir ..."
    mkdir $Gphotos_dir
    echo "Montando la carpeta contenedora $GPhotos_dir mediante sshfs ..."
    # Monta la carpeta del nas "gphotos-sync" como una unidad en la carpeta local "gphotos-sync"
    sshfs sherlockes@192.168.1.200:../../home/gphotos-sync $Gphotos_dir
    cd $Gphotos_dir
    # Ejecuta el script en python gphotos-sync
    echo "Ejecutando el script gphotos-sync mediante pipenv ..."
    pipenv run gphotos-sync $Gphotos_dir
    sleep 2
    echo "Desmontando Google Photos ..."
    fusermount -u $Gphotos_dir
    sleep 2
    echo "Borrando la carpeta $Gphotos_dir ..."
    # rm -rf $Gphotos_dir
    echo "Terminado !!!"
    sleep 2
}

# -------------------------------------------------------
# Actualiza el entorno de desarrollo de Sherblog
# -------------------------------------------------------
update_sheblog_dev(){
    rclone sync -v Sherlockes_GD:/Sherblog/layouts/ ~/Documentos/sherblog_dev/layouts/
    rclone sync -v Sherlockes_GD:/Sherblog/static/ ~/Documentos/sherblog_dev/static/
}


# -------------------------------------------------------
# Función para comprobar si la unidad está montada
# -------------------------------------------------------
montado (){
    local carpeta="$1_dir"

    if test -d ${!carpeta};
    then
	if mountpoint -q ${!carpeta}; then
	    return 0
	else
	    rm -rf ${!carpeta}
	    return 1
	fi
    else
	return 1
    fi
}

# -------------------------------------------------------
# Función para mostrar las diferentes opciones en pantalla
# -------------------------------------------------------
show_menus() {
    clear
    echo "------------------------------------------------"	
    echo "--------------  www.sherblog.pro  --------------"
    echo "------------------------------------------------"
    echo "-- 1. Nubes con Rclone"
    montado "VideoNas" && echo "-- 2. Videos en Nas (Desmontar)" || echo "-- 2. Videos en Ds216+ II"
    echo "-- 3. Backup de Google Photos"
    echo "-- 4. SherloScripts a Github"
    echo "-- 5. Actualizar rclone config"
    echo "-- 6. Actualizar entorno desarrollo Sherblog"
    echo "-- 7. Salir"
    echo "------------------------------------------------"
}


# -------------------------------------------------------
# Función para captar tecla y ejecutar función
# -------------------------------------------------------
read_options(){
    local choice
    read -p "Selecciona una opción [ 1 - 8] " choice
    case $choice in
	1) rclone_list ;;
	2) des_montar "VideoNas" ;;
	3) Google_Photos ;;
	4) SherloScripts ;;
	5) copy_rclone_config ;;
	6) exit 0;;
	7) exit 0;;
	*) echo -e "...Error..." && sleep 2
    esac
}
 
# ----------------------------------------------
# Trap CTRL+C, CTRL+Z and quit singles
# ----------------------------------------------
trap '' SIGINT SIGQUIT SIGTSTP
 
# -----------------------------------
# Bucle Principal
# ------------------------------------
rclone_check
sleep 1
clear

while true
do
    sleep 1
    show_menus
    read_options
done
